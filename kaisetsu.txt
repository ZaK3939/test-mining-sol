# Solana Facility Game 実装解説

## 概要
このプロジェクトは、Solanaブロックチェーン上で動作する施設経営ゲームのMVP（Minimum Viable Product）です。プレイヤーは施設を購入し、時間経過に応じて報酬トークンを獲得できるシンプルなPlay-to-Earnゲームとなっています。

## 技術スタック

### バックエンド（Solanaプログラム）
- **Solana**: ブロックチェーンプラットフォーム
- **Anchor Framework**: Solanaプログラム開発フレームワーク（v0.31.1）
- **Rust**: プログラム実装言語
- **SPL Token**: 報酬トークンの実装

### フロントエンド
- **Vite**: 高速モダンビルドツール（v5.0.0）
- **TypeScript**: 型安全な開発言語（v5.0.0）
- **Bun**: JavaScriptランタイム（パッケージマネージャー）
- **Vitest**: テストフレームワーク（v1.0.0）
- **Web3ライブラリ**:
  - @coral-xyz/anchor (v0.31.1)
  - @solana/web3.js (v1.87.6)
  - @solana/spl-token (v0.3.11)
  - Phantomウォレットアダプター

## プログラム構造

### 1. メインプログラム（lib.rs）
プログラムは11つの主要な命令（instruction）を持っています：

#### initialize_config
- **目的**: システム全体の設定を初期化
- **権限**: 管理者のみ実行可能
- **パラメータ**:
  - base_rate: 基本報酬レート
  - halving_interval: 半減期の間隔（秒単位）
  - treasury: 手数料収集用トレジャリーアカウント
- **動作**: グローバル設定を保存し、最初の半減期時刻を設定

#### create_reward_mint
- **目的**: 報酬として配布するSPLトークンのMintを作成
- **権限**: 管理者のみ実行可能
- **動作**: PDAをMint Authorityとして設定し、プログラムのみがトークンを発行できるようにする

#### init_user
- **目的**: 新規ユーザーのアカウントを初期化
- **権限**: ユーザー自身が実行
- **パラメータ**: referrer (Option<Pubkey>) - 招待者のアドレス（オプション）
- **動作**: ユーザー状態を初期化し、最終収穫時刻を現在時刻に設定、リファラル情報を保存

#### buy_facility
- **目的**: 施設を購入し、初期マシンを配置
- **権限**: ユーザー自身が実行
- **制約**: 各ユーザーは1つの施設のみ所有可能
- **動作**:
  - 新しい施設アカウントを作成
  - 初期マシン1台を自動配置（Grow Power: 100）
  - ユーザー状態を更新

#### claim_reward
- **目的**: 蓄積された報酬を請求
- **権限**: 施設を所有するユーザーのみ実行可能
- **動作**:
  1. 半減期をチェックし、必要に応じてbase_rateを更新
  2. 最終収穫からの経過時間を計算
  3. 報酬量を計算: (経過時間 × Grow Power × base_rate) / 1000
  4. SPLトークンをユーザーのトークンアカウントにミント
  5. 最終収穫時刻を更新

#### distribute_referral_reward
- **目的**: リファラル報酬を累積
- **権限**: 被招待者が実行
- **パラメータ**: reward_amount (u64) - 基本報酬額
- **動作**: 
  1. リファラル報酬を計算（基本報酬の10%）
  2. リファラーのpending_referral_rewardsに累積

#### claim_referral_rewards
- **目的**: 累積されたリファラル報酬を請求
- **権限**: リファラー自身が実行
- **動作**:
  1. pending_referral_rewardsをチェック
  2. SPLトークンとして発行
  3. pending_referral_rewardsをリセット

#### upgrade_facility
- **目的**: 施設サイズをアップグレード
- **権限**: 施設所有者が実行
- **動作**:
  1. アップグレードコストを計算（段階的に増加）
  2. $WEEDトークンをバーン（破棄）
  3. 施設サイズとmax_capacityを更新

#### add_machine
- **目的**: 施設にマシンを追加
- **権限**: 施設所有者が実行
- **コスト**: 固定500 $WEED
- **動作**:
  1. 容量制限をチェック
  2. $WEEDトークンをバーン
  3. マシン数とGrow Powerを増加

#### transfer_with_fee
- **目的**: 2%手数料付きトークン転送
- **権限**: トークン所有者が実行
- **動作**:
  1. 転送量から2%の手数料を計算
  2. 手数料をトレジャリーアカウントに送金
  3. 残り98%を受信者に送金

### 2. 状態管理（state.rs）

#### Config（グローバル設定）
```rust
pub struct Config {
    pub base_rate: u64,           // 基本報酬レート
    pub halving_interval: i64,    // 半減期間隔（秒）
    pub next_halving_time: i64,   // 次回半減期の時刻
    pub admin: Pubkey,            // 管理者アドレス
    pub treasury: Pubkey,         // トレジャリーアカウント（手数料収集先）
    pub reserve: [u8; 32],        // 将来の拡張用
}
```

#### UserState（ユーザー状態）
```rust
pub struct UserState {
    pub owner: Pubkey,                    // ユーザーの公開鍵
    pub total_grow_power: u64,            // 総Grow Power
    pub last_harvest_time: i64,           // 最後の収穫時刻
    pub has_facility: bool,               // 施設所有フラグ
    pub referrer: Option<Pubkey>,         // 招待者のアドレス（オプション）
    pub pending_referral_rewards: u64,   // 累積リファラル報酬（未請求）
    pub reserve: [u8; 55],                // 将来の拡張用
}
```

#### Facility（施設）
```rust
pub struct Facility {
    pub owner: Pubkey,              // 所有者
    pub facility_size: u32,         // 施設サイズ/レベル
    pub max_capacity: u32,          // 最大マシン容量
    pub machine_count: u32,         // 現在のマシン数
    pub total_grow_power: u64,      // 総Grow Power
    pub reserve: [u8; 56],          // 将来の拡張用
}
```

### 3. アカウント設計（PDA）

Program Derived Address (PDA)を使用して、決定論的なアカウントアドレスを生成：

- **Config PDA**: `["config"]`
- **UserState PDA**: `["user", user_pubkey]`
- **Facility PDA**: `["facility", user_pubkey]`
- **RewardMint PDA**: `["reward_mint"]`
- **MintAuthority PDA**: `["mint_authority"]`

この設計により、アカウントアドレスを事前に計算でき、アカウントの一意性が保証されます。

## ゲームメカニクス

### 報酬システム
1. **遅延計算（Lazy Evaluation）**: 報酬は請求時にのみ計算される
2. **時間ベース**: 最後の収穫からの経過時間に基づいて報酬が蓄積
3. **線形成長**: 報酬 = (経過時間[秒] × Grow Power × base_rate) / 1000
4. **トークン仕様**: 
   - トークン名: Weed Token
   - シンボル: $WEED
   - 小数点以下桁数: 6
   - SPL Token Metadataプログラムによるメタデータ管理

### 半減期メカニズム
- 設定された間隔（デフォルト1年）ごとにbase_rateが半分になる
- これにより、初期参加者により多くの報酬を提供し、インフレを抑制

### 制限事項
- 各ユーザーは1つの施設のみ所有可能（MVP版の制限）
- 施設購入時に自動的に1台のマシンが配置される
- マシン追加は施設の容量制限内のみ

### リファラル（招待）システム
1. **招待機能**: ユーザー初期化時にリファラー（招待者）を指定可能
2. **報酬分配**: 被招待者が報酬を請求する際、リファラーに10%のボーナス報酬
3. **累積システム**: リファラル報酬は`pending_referral_rewards`に累積
4. **請求機能**: リファラーは別途`claim_referral_rewards`で報酬を請求

### 施設サイズ・アップグレードシステム
1. **階層システム**: 施設サイズは1から段階的にアップグレード可能
2. **容量拡張**: サイズアップでマシン容量が増加
   - サイズ1: 1台, サイズ2: 3台, サイズ3: 6台, サイズ4: 10台, サイズ5: 15台
   - サイズ6以降: 5台ずつ増加
3. **アップグレードコスト**: $WEEDトークンを消費
   - サイズ1→2: 1000 $WEED
   - サイズ2→3: 2500 $WEED
   - サイズ3→4: 5000 $WEED
   - サイズ4→5: 10000 $WEED
   - サイズ6以降: 5000ずつ増加
4. **マシン追加**: 容量内で追加マシンを購入可能（500 $WEED/台）

### 転送手数料システム
1. **手数料徴収**: 全ての$WEEDトークン転送時に2%の手数料を自動徴収
2. **手数料配分**: 徴収された手数料は設定されたトレジャリーアカウントに送金
3. **透明性**: 受信者は転送額の98%を受け取り、手数料は明示的に分離
4. **プログラム経由**: 直接のSPLトークン転送ではなく、プログラム経由の転送が必要

## セキュリティ考慮事項

1. **署名検証**: すべてのユーザーアクションには署名が必要
2. **PDA所有権**: アカウントの所有権はPDAによって保証
3. **オーバーフロー保護**: checked演算を使用して数値オーバーフローを防止
4. **アクセス制御**: 管理者機能とユーザー機能を明確に分離

## エラーハンドリング

カスタムエラー定義（error.rs）：
- `AlreadyHasFacility`: 既に施設を所有している
- `NoFacility`: 施設を所有していない
- `NoRewardToClaim`: 請求可能な報酬がない
- `CalculationOverflow`: 計算オーバーフロー

## テスト戦略

テスト（facility-game.ts）は以下の流れで実装：
1. システム初期化テスト
2. 報酬Mint作成テスト
3. ユーザー初期化テスト
4. 施設購入テスト
5. トークンアカウント作成
6. 報酬請求テスト（時間経過シミュレーション）
7. エラーケーステスト（重複購入など）

## 将来の拡張性

各アカウント構造体に64バイトの`reserve`フィールドを設けることで、将来的な機能拡張に対応：
- 複数マシンタイプの実装
- マシンアップグレードシステム
- 紹介報酬システム
- 複数施設所有機能

## デプロイ情報

- **Program ID**: `EDzDNN1v64dKgbmHc917kBiDThMV8ZrC7cLDDyGTyu89`
- **対応ネットワーク**: Localnet, Devnet, Testnet, Mainnet-beta
- **必要なSOL**: デプロイには約2 SOL必要

## 開発環境

必要なツール：
- Rust (最新安定版)
- Solana CLI (v1.17.0以上)
- Anchor CLI (v0.31.1)
- Node.js (v16以上)
- Yarn

## フロントエンド実装

### アーキテクチャ

#### サービス指向アーキテクチャ
- **SolanaService**: ブロックチェーンとの全ての対話を管理
- **AnchorClient**: Anchorプログラム呼び出しのラッパー
- **FacilityGameApp**: アプリケーション全体の状態管理（シングルトン）

#### ヘルパー/ユーティリティ
- **PDAHelper**: PDAアドレス計算の集約
- **Logger**: 中央集権的なログ管理システム
- **ErrorHandler**: ユーザーフレンドリーなエラー処理
- **Constants**: 定数の集約管理

### 主要機能

#### 1. ウォレット連携
- Phantomウォレットとの統合
- ウォレット状態の管理（アドレス、残高表示）
- トランザクション後の自動残高更新

#### 2. ゲームアクション
- ユーザー初期化 (`initUser`)
- 施設購入 (`buyFacility`)
- 報酬請求 (`claimRewards`)
- 開発用SOLエアドロップ機能

#### 3. リアルタイム監視
- RPC接続状態の表示
- ネットワーク情報（ブロック高さ、スロット）
- ゲーム状態の追跡:
  - ユーザーステータス
  - 施設所有状況
  - Grow Power
  - トークン残高
- トランザクションログシステム

#### 4. UI/UXの特徴
- バニラJavaScript/TypeScriptによる実装（フレームワーク不使用）
- 日本語インターフェース
- グラデーション背景とカードベースのレイアウト
- ローディング状態の表示
- 成功/エラーメッセージの自動消去
- ステータスインジケーター（接続/切断/ローディング）

### セキュリティとエラー処理

#### フロントエンドセキュリティ
- 環境変数による設定管理
- RPCエンドポイントの外部化
- ウォレット署名による全トランザクション認証

#### エラーハンドリング
- ユーザーフレンドリーなエラーメッセージ
- 資金不足の特別処理
- 接続エラーからの回復機能
- 詳細なログ出力（開発者向け）

### 開発者向け機能
- 包括的なログシステムとUI表示
- windowオブジェクトへのデバッグ関数公開
- ローカルバリデータサポート
- 環境変数による設定切り替え

### テスト環境
- Vitestによるユニットテスト
- UIモードサポート
- モックセットアップ完備
- 主要コンポーネントのテストカバレッジ

## デプロイと実行

### フロントエンド起動手順
```bash
cd frontend
bun install  # 依存関係のインストール
bun run dev  # 開発サーバー起動（http://localhost:5173）
```

### ビルドとデプロイ
```bash
bun run build     # プロダクションビルド
bun run preview   # ビルドのプレビュー
```

### 開発コマンド
```bash
bun run lint      # ESLintチェック
bun run lint:fix  # ESLint自動修正
bun run format    # Prettierフォーマット
bun run test      # テスト実行
bun run test:ui   # UIモードでテスト
```

## まとめ

このプロジェクトは、Solanaブロックチェーン上でのゲーム開発の基礎を示すMVPです。バックエンドはAnchorフレームワークを活用した安全で効率的な実装、フロントエンドはモダンなTypeScript開発環境とシンプルなバニラJSによるUI実装を特徴としています。シンプルながら拡張可能な設計により、将来的により複雑なゲームメカニクスを追加することが可能です。